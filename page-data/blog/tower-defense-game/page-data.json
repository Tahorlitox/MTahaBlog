{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/tower-defense-game/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Building a Tower Defense Game from Scratch","date":"July 25, 2025"},"html":"<p>As part of our programming coursework, we built a fully functional <strong>Tower Defense Game</strong> in Java.<br>\nThe goal? To apply Object-Oriented Programming concepts in a real-time strategy setting — and have fun doing it.</p>\n<p>This post summarizes how we built the game, the features we implemented, and how we worked together as a team.</p>\n<hr>\n<h2>How the Game Works</h2>\n<p>Like any classic Tower Defense game, the player must <strong>defend a base</strong> against waves of enemies by strategically placing towers on a map.</p>\n<p>The towers attack automatically, each with different range, speed, and power.</p>\n<h3>Game Features</h3>\n<ul>\n<li>Real-time enemy movement along a path</li>\n<li>Click-to-place towers on allowed tiles</li>\n<li>Health points for each enemy</li>\n<li>Visual feedback for attacks and enemy defeats</li>\n<li>Basic in-game economy (gold earned per enemy defeated)</li>\n</ul>\n<hr>\n<h2>The Tower System</h2>\n<p>Each tower is an object with custom attributes:</p>\n<table>\n<thead>\n<tr>\n<th>Tower Type</th>\n<th>PV</th>\n<th>ATK</th>\n<th>ATK Speed</th>\n<th>Range</th>\n<th>Element</th>\n<th>Cost</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Archer</td>\n<td>30</td>\n<td>5</td>\n<td>1.0</td>\n<td>2.0</td>\n<td>NONE</td>\n<td>20</td>\n</tr>\n<tr>\n<td>Wind Caster</td>\n<td>30</td>\n<td>5</td>\n<td>1.5</td>\n<td>6.0</td>\n<td>WIND</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Water Caster</td>\n<td>30</td>\n<td>3</td>\n<td>1.0</td>\n<td>4.0</td>\n<td>WATER</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Earth Caster</td>\n<td>50</td>\n<td>7</td>\n<td>0.5</td>\n<td>2.5</td>\n<td>EARTH</td>\n<td>100</td>\n</tr>\n<tr>\n<td>Fire Caster</td>\n<td>30</td>\n<td>10</td>\n<td>0.5</td>\n<td>2.5</td>\n<td>FIRE</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<p>We designed the towers with a strong <strong>OOP approach</strong> using inheritance and polymorphism to keep code clean and extensible.</p>\n<hr>\n<h2>Shop System</h2>\n<p>One of my teammates handled the <strong>shop system</strong> — allowing players to buy towers using in-game gold.<br>\nThe shop checks the available balance, updates tower slots, and prevents over-purchasing.</p>\n<p>This modularity helped us <strong>separate concerns</strong> between:</p>\n<ul>\n<li>Combat logic</li>\n<li>UI interaction</li>\n<li>Shop &#x26; upgrades</li>\n</ul>\n<hr>\n<h2>What I Worked On</h2>\n<p>I was responsible for the <strong>towers and their behavior</strong>:</p>\n<ul>\n<li>Implemented all tower classes with unique stats</li>\n<li>Built the attack mechanism (cooldowns, hit range)</li>\n<li>Managed tower selection &#x26; placement on the map</li>\n<li>Ensured damage logic was consistent across types</li>\n</ul>\n<p>This helped me practice class design, method abstraction, and real-time updates in a 2D grid.</p>\n<hr>\n<h2>What We Learned</h2>\n<p>This project taught us a lot, including:</p>\n<ul>\n<li>Handling real-time game loops in Java</li>\n<li>Using object-oriented principles for clean game architecture</li>\n<li>Dealing with performance issues and collision detection</li>\n<li>Working collaboratively using Git (GitHub/GitLab)</li>\n</ul>\n<p>We also learned to <strong>scope our ambition</strong>, focusing on solid mechanics instead of trying to build a huge game.</p>\n<hr>\n<h2>Final Thoughts</h2>\n<p>Tower Defense might seem like a small project, but building one from scratch teaches you <strong>so much</strong> — from logic to UX to architecture.</p>\n<p>It was fun, challenging, and a huge level-up in our programming journey.</p>\n<p>Thanks for reading!</p>"}},"pageContext":{"slug":"/blog/tower-defense-game/"}},"staticQueryHashes":[],"slicesMap":{}}