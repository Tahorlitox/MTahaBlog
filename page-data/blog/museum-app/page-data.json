{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/museum-app/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Museum App","date":null},"html":"<p>In our software engineering project, we built a <strong>Java application</strong> that helps users explore, filter, and analyze data about museums in France — using real data from the French Ministry of Culture.</p>\n<p>Here’s how we designed it, what tools we used (including AI), and how we made it work.</p>\n<hr>\n<h2>Project Goal</h2>\n<p>We wanted to create a user-friendly app where anyone could:</p>\n<ul>\n<li>Search museums by region, theme, accessibility, etc.</li>\n<li>Generate visual stats (diagrams, HTML or PDF reports)</li>\n<li>View everything through a custom GUI</li>\n</ul>\n<p>We built the entire app from scratch, including a visual statistics engine.</p>\n<hr>\n<h2>How to Run the App</h2>\n<p>To launch the app locally:</p>\n<ol>\n<li>Open <code>src/projetMusee/ui/MainWindow.java</code> in your Java IDE</li>\n<li>Find the <code>main</code> method</li>\n<li>Right-click → <strong>Run 'Main'</strong></li>\n</ol>\n<p>You’ll get a full GUI with working filters, diagrams, and reports.</p>\n<hr>\n<h2>How We Used AI (ChatGPT / Copilot)</h2>\n<p>At the beginning, our teacher encouraged us to use AI tools like ChatGPT <strong>to speed things up</strong> — as long as we understood what the code was doing.</p>\n<p>So we used AI in specific, controlled ways:</p>\n<ul>\n<li>For example, when building the <code>Musee</code> class, we gave GPT-4 a sample JSON museum object and asked it to generate:\n<ul>\n<li>A matching Java class</li>\n<li>With all its fields and getters/setters</li>\n</ul>\n</li>\n</ul>\n<p>This saved time on repetitive work.<br>\n<strong>We still reviewed everything manually</strong> to make sure it fit our architecture.</p>\n<blockquote>\n<p>AI helped, but it didn’t decide. We did.</p>\n</blockquote>\n<p>We also used ChatGPT for:</p>\n<ul>\n<li>Generating helper methods</li>\n<li>Refactoring boilerplate code</li>\n<li>Speeding up test creation</li>\n</ul>\n<hr>\n<h2>What We Designed Ourselves</h2>\n<p>Everything else — the architecture, logic, features — was fully designed by our team:</p>\n<ul>\n<li>Folder/package structure</li>\n<li>GUI design &#x26; interactions</li>\n<li>VisuStat engine integration</li>\n<li>Filtering logic &#x26; CSV/SVG generation</li>\n<li>Testing strategy</li>\n</ul>\n<p>We <strong>never used AI to generate core logic</strong>, only small helpers.</p>\n<hr>\n<h2>Testing</h2>\n<ul>\n<li><strong>Back-end</strong>: Tested using JUnit (file loading, filtering, stats)</li>\n<li><strong>GUI</strong>: Manually tested (buttons, color changes, panel display, etc.)</li>\n<li>We used <code>System.out.println()</code> &#x26; <code>toString()</code> methods to trace behavior during interaction</li>\n</ul>\n<hr>\n<h2>Libraries Used</h2>\n<ul>\n<li><code>vizustat-v2.jar</code> — our own visual stats engine</li>\n<li>Apache Batik — to convert SVG to PNG</li>\n<li>JUnit 4.13.2 + Hamcrest — for unit testing</li>\n</ul>\n<hr>\n<h2>Final Thoughts</h2>\n<p>This project helped us connect theory to real software development — from data parsing to GUI interaction, with a bit of AI along the way.</p>\n<p>We didn’t just build an app.<br>\nWe built a process.</p>\n<p>Thanks for reading!</p>"}},"pageContext":{"slug":"/blog/museum-app/"}},"staticQueryHashes":[],"slicesMap":{}}